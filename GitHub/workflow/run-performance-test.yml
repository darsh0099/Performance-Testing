name: Run JMeter Performance Test

on:
  workflow_dispatch:
    inputs:
      jmx_file:
        description: 'The JMeter .jmx file to run (e.g., performance-test.jmx)'
        required: true
        type: choice
        options:
          - jmeter-scripts/LoadTesting.jmx
        default: 'jmeter-scripts/LoadTesting.jmx'

jobs:
  run_jmeter_test:
    name: Run JMeter Test for ${{ inputs.jmx_file }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository content
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Extract the base name of the .jmx file
      - name: Get JMX file name
        id: jmx_name
        run: |
          # Use bash parameter expansion to remove the path and extension
          jmx_path_and_name="${{ inputs.jmx_file }}"
          jmx_filename="${jmx_path_and_name##*/}"
          jmx_basename="${jmx_filename%.jmx}"
          echo "JMX_BASENAME=$jmx_basename" >> $GITHUB_ENV
          
      # Step 4: Generate a dynamic timestamp
      - name: Set dynamic timestamp
        id: timestamp_step
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      # Step 5: Run the JMeter test with Docker
      - name: Run JMeter test with dynamic filenames
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/jmeter \
            -w /jmeter \
            justb4/jmeter:latest \
            -n -t "${{ inputs.jmx_file }}" \
            -l "jmeter-results/report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}.jtl" \
            -e -o "jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}"

      # Step 6: Upload the dynamic test results file as an artifact
      - name: Upload JMeter Results File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}
          path: jmeter-results/report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}.jtl
          
      # Step 7: Upload the dynamic HTML report as an artifact
      - name: Upload JMeter HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}
          path: jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}/
