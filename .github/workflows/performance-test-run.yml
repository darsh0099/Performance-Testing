name: Run JMeter Performance Test

on:
  workflow_dispatch:
    inputs:
      jmx_file:
        description: 'The JMeter .jmx file to run'
        required: true
        type: choice
        options:
          - jmeter-scripts/performance-test.jmx
          - jmeter-scripts/LoadTesting.jmx
        default: 'jmeter-scripts/performance-test.jmx'

jobs:
  run_jmeter_test:
    name: Run JMeter Test for ${{ inputs.jmx_file }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository content
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install JMeter and the Plugins
      - name: Install JMeter and Plugins
        run: |
          JMETER_VERSION="5.6.3"
          JMETER_DIR="apache-jmeter-${JMETER_VERSION}"

          # Download and extract JMeter
          curl -L --silent https://archive.apache.org/dist/jmeter/binaries/${JMETER_DIR}.tgz -o ${JMETER_DIR}.tgz
          sudo tar -xvf ${JMETER_DIR}.tgz
          
          # Download Plugins Manager
          PLUGINS_MANAGER_VERSION="2.10"
          curl -L --silent https://repo1.maven.org/maven2/kg/apc/jmeter-plugins-manager/${PLUGINS_MANAGER_VERSION}/jmeter-plugins-manager-${PLUGINS_MANAGER_VERSION}.jar -o ${JMETER_DIR}/lib/ext/jmeter-plugins-manager.jar
          
          # Download Command Line Runner required by the Plugins Manager CLI
          CMDRUNNER_VERSION="2.2.1"
          curl -L --silent https://repo1.maven.org/maven2/kg/apc/cmdrunner/${CMDRUNNER_VERSION}/cmdrunner-${CMDRUNNER_VERSION}.jar -o ${JMETER_DIR}/lib/cmdrunner.jar
          
          # Install the Ultimate Thread Group and Standard plugins using the CLI
          java -jar ${JMETER_DIR}/lib/cmdrunner.jar --tool org.jmeterplugins.repository.PluginManagerCMD install jpgc-casutg,jpgc-standard

      # Step 4: Extract the base name of the .jmx file
      - name: Get JMX file name
        id: jmx_name
        run: echo "JMX_BASENAME=$(basename "${{ inputs.jmx_file }}" .jmx)" >> $GITHUB_ENV

      # Step 5: Generate a dynamic timestamp
      - name: Set dynamic timestamp
        id: timestamp_step
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      # Step 6: Run the JMeter test
      - name: Run JMeter test
        run: |
          JMETER_DIR="apache-jmeter-5.6.3"
          ./${JMETER_DIR}/bin/jmeter -n \
            -t "${{ inputs.jmx_file }}" \
            -l "jmeter-results/report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}.jtl" \
            -e -o "jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}"

      # Step 7: Upload the dynamic test results file as an artifact
      - name: Upload JMeter Results File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}
          path: jmeter-results/report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}.jtl

      # Step 8: Upload the dynamic HTML report as an artifact
      - name: Upload JMeter HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}
          path: jmeter-report-${{ env.JMX_BASENAME }}-${{ env.TIMESTAMP }}/
